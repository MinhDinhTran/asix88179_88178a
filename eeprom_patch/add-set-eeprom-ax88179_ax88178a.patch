This patch adds the missing EEPROM write function to the ax88179_88178a driver.
In byte 11 of the EEPROM data there is a checksum over the bytes 7-10, which
are the PID and VID of the usb device. This checksum needs to be written, if
PID and VID are changed.

The checksum is calculated that way:
 csum = (pid + vid)
 csum = 0xff - ((csum >> 8) + (csum & 0xff))

* done for 4.14.103
---
diff --no-dereference -urpN a/drivers/net/usb/ax88179_178a.c b/drivers/net/usb/ax88179_178a.c
--- a/drivers/net/usb/ax88179_178a.c 2018-12-03 13:26:02.848000000 +0100
+++ b/drivers/net/usb/ax88179_178a.c 2018-12-03 13:28:14.216000000 +0100
@@ -28,6 +28,7 @@
 
 #define AX88179_PHY_ID    0x03
 #define AX_EEPROM_LEN    0x100
+#define AX_EEPROM_BLOCK    0x40
 #define AX88179_EEPROM_MAGIC   0x17900b95
 #define AX_MCAST_FLTSIZE   8
 #define AX_MAX_MCAST    64
@@ -43,6 +44,7 @@
 #define AX_ACCESS_PHY    0x02
 #define AX_ACCESS_EEPROM   0x04
 #define AX_ACCESS_EFUS    0x05
+#define AX_RELOAD_EEPROM   0x06
 #define AX_PAUSE_WATERLVL_HIGH   0x54
 #define AX_PAUSE_WATERLVL_LOW   0x55
 
@@ -623,6 +625,56 @@ ax88179_get_eeprom(struct net_device *ne
  return 0;
 }
 
+static int
+ax88179_set_eeprom(struct net_device *net, struct ethtool_eeprom *eeprom,
+     u8 *data)
+{
+ struct usbnet *dev = netdev_priv(net);
+ unsigned int offset = eeprom->offset;
+ unsigned int len = eeprom->len;
+ int i, err = 0;
+ u8 *block;
+
+ if ((offset % AX_EEPROM_BLOCK) || (len % AX_EEPROM_BLOCK)) {
+  offset = eeprom->offset / AX_EEPROM_BLOCK * AX_EEPROM_BLOCK;
+  len = eeprom->len + eeprom->offset - offset;
+  len = DIV_ROUND_UP(len, AX_EEPROM_BLOCK) * AX_EEPROM_BLOCK;
+
+  block = kmalloc(len, GFP_KERNEL);
+  if (!block)
+   return -ENOMEM;
+
+  for (i = 0; i < len; i += AX_EEPROM_BLOCK) {
+   err = __ax88179_read_cmd(dev, AX_ACCESS_EEPROM,
+       (offset + i) >> 1,
+       AX_EEPROM_BLOCK >> 1,
+       AX_EEPROM_BLOCK,
+       &block[i], 0);
+   if (err < 0) {
+    kfree(block);
+    return err;
+   }
+  }
+  memcpy(block + eeprom->offset - offset, data, eeprom->len);
+ } else {
+  block = data;
+ }
+
+ for (i = 0; err >= 0 && i < len; i += AX_EEPROM_BLOCK) {
+  err = ax88179_write_cmd(dev, AX_ACCESS_EEPROM,
+     (offset + i) >> 1,
+     AX_EEPROM_BLOCK >> 1,
+     AX_EEPROM_BLOCK, &block[i]);
+ }
+
+ kfree(block);
+
+ if (err >= 0)
+  err = ax88179_write_cmd(dev, AX_RELOAD_EEPROM, 0, 0, 0, NULL);
+
+ return err < 0 ? err : 0;
+}
+
 static int ax88179_get_link_ksettings(struct net_device *net,
           struct ethtool_link_ksettings *cmd)
 {
@@ -834,6 +886,7 @@ static const struct ethtool_ops ax88179_
  .set_wol  = ax88179_set_wol,
  .get_eeprom_len  = ax88179_get_eeprom_len,
  .get_eeprom  = ax88179_get_eeprom,
+ .set_eeprom  = ax88179_set_eeprom,
  .get_eee  = ax88179_get_eee,
  .set_eee  = ax88179_set_eee,
  .nway_reset  = usbnet_nway_reset,

